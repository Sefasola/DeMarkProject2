
                
                if (snapshot.hasData) {
                  _markers.addAll(snapshot.data!);
                } else {
                  print('snapshot bos');
                }
                return GoogleMap(
                  // MARKER OBJCET
                  //
                  onTap: (LatLng position) async {
                    String comment = await showDialog(
                      context: context,
                      builder: (BuildContext context) {
                        return AlertDialog(
                          title: Text('Add Marker'),
                          content: TextField(
                            controller: textController,
                            decoration:
                                InputDecoration(hintText: 'Initial comment'),
                          ),
                          actions: [
                            TextButton(
                              child: Text('CANCEL'),
                              onPressed: () => Navigator.of(context).pop(),
                            ),
                            TextButton(
                              child: Text('ADD'),
                              onPressed: () {
                                //print(position.longitude);
                                postMarker(
                                    position.latitude,
                                    position.longitude,
                                    textController.text,
                                    textController.text);
                                Navigator.of(context).pop(textController.text!);
                                textController.clear();
                                setState(() {
                                  futuremarker = getAllMarkers();
                                });
                              },
                            ),
                          ],
                        );
                      },
                    );
                  },
                  markers: _markers.map((Marker marker) {
                    return Marker(
                      markerId: marker.markerId,
                      position: marker.position,
                      infoWindow: marker.infoWindow,
                      onTap: () {
                        showModalBottomSheet(
                          elevation: 0.5,
                          shape: RoundedRectangleBorder(
                            borderRadius: BorderRadius.circular(20.0),
                          ),
                          context: context,
                          builder: (BuildContext context) {
                            return Container(
                              child: Column(
                                mainAxisSize: MainAxisSize.max,
                                children: [
                                  Container(
                                    height: 50,
                                    width: 50,
                                  ),
                                  FutureBuilder<List<dynamic>>(
                                    future: fetchComments(
                                        int.parse(marker.markerId.value)),
                                    builder: (BuildContext context,
                                        AsyncSnapshot<List<dynamic>> snapshot) {
                                      if (snapshot.connectionState ==
                                          ConnectionState.waiting) {
                                        return CircularProgressIndicator();
                                      } else if (snapshot.hasError) {
                                        return Text('No Comments Found',
                                            textScaleFactor: 1.5);
                                      } else {
                                        List? _comments = snapshot.data;

                                        //print(_comments);

                                        return ListView.builder(
                                          shrinkWrap: true,
                                          itemCount: _comments?.length,
                                          itemBuilder: (BuildContext context,
                                              int index) {
                                            bool matchId = int.parse(
                                                    _comments![index]
                                                        ['User_ID']) ==
                                                userId;
                                            print(matchId);
                                            return FutureBuilder<String>(
                                              future: fetchUserName(int.parse(
                                                  _comments![index]
                                                      ['User_ID'])),
                                              builder: (BuildContext context,
                                                  AsyncSnapshot<String>
                                                      snapshot) {
                                                if (snapshot.connectionState ==
                                                    ConnectionState.waiting) {
                                                  return ListTile(
                                                    title: Text(
                                                      _comments![index]
                                                          ['Comment_Content'],
                                                    ),
                                                    subtitle: Text(
                                                        'Loading user name...'),
                                                  );
                                                } else if (snapshot.hasError) {
                                                  return ListTile(
                                                    title: Text(
                                                      _comments![index]
                                                          ['Comment_Content'],
                                                    ),
                                                    subtitle: Text(
                                                        'Failed to fetch user name'),
                                                  );
                                                } else {
                                                  //print("userid");
                                                  //print(_comments[index]['User_ID']);
                                                  String userName =
                                                      snapshot.data!;
                                                  return ListTile(
                                                    leading: Container(
                                                      height: 30,
                                                      width: 40,
                                                      child: GestureDetector(
                                                        onLongPress: () {
                                                          showDialog(
                                                              context: context,
                                                              builder:
                                                                  (context) {
                                                                return AlertDialog(
                                                                    content: Text(
                                                                        'asd'));
                                                              });
                                                          print(_comments);
                                                        },
                                                        child: LikeButton(
                                                          onTap:
                                                              (isLiked) async {
                                                            print(_comments[
                                                                    index]
                                                                ['Comment_ID']);
                                                            int commentid =
                                                                _comments[index]
                                                                    [
                                                                    'Comment_ID'];
                                                            isLiked =
                                                                await toggleLike(
                                                                    userId,
                                                                    commentid);
                                                          },
                                                          likeCount: 0,
                                                          size: 25,
                                                        ),
                                                      ),
                                                    ),
                                                    title: Text(_comments![
                                                            index]
                                                        ['Comment_Content']),
                                                    subtitle: Text(userName),
                                                    trailing: matchId
                                                        ? SizedBox(
                                                            width: 48.0,
                                                            child: IconButton(
                                                              icon: Icon(
                                                                  Icons.delete),
                                                              onPressed: () {
                                                                setState(() {
                                                                  _comments!
                                                                      .removeAt(
                                                                          index);
                                                                });
                                                                Navigator.pop(
                                                                    context);
                                                              },
                                                            ),
                                                          )
                                                        : SizedBox(),
                                                  );
                                                }
                                              },
                                            );
                                          },
                                        );
                                      }
                                    },
                                  ),
                                  ElevatedButton(
                                    onPressed: () {
                                      if (islogged) {
                                        showDialog(
                                          context: context,
                                          builder: (context) => AlertDialog(
                                            title: Text('Add a new comment:'),
                                            content: TextField(
                                              controller: textController,
                                              decoration: InputDecoration(
                                                hintText:
                                                    'Type your comment here...',
                                              ),
                                            ),
                                            actions: [
                                              ElevatedButton(
                                                onPressed: () {
                                                  setState(() {
                                                    _comments.add(
                                                        textController.text!);
                                                  });
                                                  // Save the new comment to the database or state
                                                  postComment(
                                                      int.parse(marker
                                                          .markerId.value),
                                                      userId,
                                                      textController.text);

                                                  Navigator.of(context).pop();
                                                },
                                                child: Text('Save Comment'),
                                              ),
                                              ElevatedButton(
                                                onPressed: () {
                                                  // Close the alert dialog without saving the comment
                                                  Navigator.of(context).pop();
                                                },
                                                child: Text('Cancel'),
                                              ),
                                            ],
                                          ),
                                        );
                                      } else {
                                        showDialog(
                                            context: context,
                                            builder: ((context) => AlertDialog(
                                                  title: Text(
                                                      'You Need be Logged In to Comment'),
                                                  actions: [
                                                    ElevatedButton(
                                                      onPressed: () {
                                                        Navigator.pop(context);
                                                        Navigator.push(
                                                          context,
                                                          MaterialPageRoute(
                                                              builder: (context) =>
                                                                  const LoginView()),
                                                        );
                                                        setState(() {});
                                                      },
                                                      child: Text('Login Page'),
                                                    ),
                                                    ElevatedButton(
                                                      onPressed: () {
                                                        // Close the alert dialog without saving the comment
                                                        Navigator.of(context)
                                                            .pop();
                                                      },
                                                      child: Text('Cancel'),
                                                    ),
                                                  ],
                                                )));
                                      }
                                    },
                                    child: Text('Add a New Comment'),
                                  ),
                                ],
                              ),
                            );
                          },
                        );
                      },
                    );
                  }).toSet(),
                  initialCameraPosition: CameraPosition(
                    target: LatLng(38.729210, 35.483910),
                    zoom: 10,
                  ),
                );
              